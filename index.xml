<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Simple Made Daily</title>
    <link>https://caioferreira.dev/</link>
    <description>Recent content on Simple Made Daily</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://caioferreira.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reflections about Supervised Learning on Security</title>
      <link>https://caioferreira.dev/posts/reflections-supervised-ml/reflections-supervised-learning-in-security/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://caioferreira.dev/posts/reflections-supervised-ml/reflections-supervised-learning-in-security/</guid>
      <description>Supervised learning is a technique that aims to learn a hypothesis function $h$ that fits a behavior observed in the real-world, which is governed by an unknown function $f$.
To learn this function, we use a set of example data points composed of inputs (also called features) and outcomes (sometimes called labels). These example data points were sampled from the real world behavior, i.e. from the function $f$, at some time in the past.</description>
    </item>
    
    <item>
      <title>Using Technical Debt as your next Tool</title>
      <link>https://caioferreira.dev/posts/technical-debt/technical-debt-tool/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://caioferreira.dev/posts/technical-debt/technical-debt-tool/</guid>
      <description>Quick Summary In this post I will show you what is the debt that we collect with during the software lifecycle, what are its causes and how to pay it back.
Introduction Often we are faced with a dilemma in software development: implement the best solution for the feature or delivery it quickly but assuming some workarounds and code smells? Whichever side you choose, will be a cost.
This cost is even greater if you work on legacy projects or high changing environments.</description>
    </item>
    
    <item>
      <title>Difference between state and State</title>
      <link>https://caioferreira.dev/posts/difference-between-state-and-state/</link>
      <pubDate>Tue, 18 Dec 2018 12:00:00 +0000</pubDate>
      
      <guid>https://caioferreira.dev/posts/difference-between-state-and-state/</guid>
      <description>Photo by Annie Spratt on Unsplash
Today we will try to solve the ambiguity in the concept of state, highlighting the differences in the two main notions about it. The post describes the nature of each one, some use cases and how they fit in the object and functional paradigms.
Introduction On the last couple of months, I dove into the topic of State Machines and how we can design UIâ€™s with this concept in order to provide better semantic and predictability to our application.</description>
    </item>
    
    
  </channel>
</rss>
