<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>oop on Simple Made Daily</title>
    <link>https://caioferreira.dev/tags/oop/</link>
    <description>Recent content in oop on Simple Made Daily</description>
    <image>
      <title>Simple Made Daily</title>
      <url>https://caioferreira.dev/papermod-cover.png</url>
      <link>https://caioferreira.dev/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Dec 2018 12:00:00 +0000</lastBuildDate><atom:link href="https://caioferreira.dev/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Difference between state and State</title>
      <link>https://caioferreira.dev/posts/difference-between-state-and-state/</link>
      <pubDate>Tue, 18 Dec 2018 12:00:00 +0000</pubDate>
      
      <guid>https://caioferreira.dev/posts/difference-between-state-and-state/</guid>
      <description>Photo by Annie Spratt on Unsplash
Today we will try to solve the ambiguity in the concept of state, highlighting the differences in the two main notions about it. The post describes the nature of each one, some use cases and how they fit in the object and functional paradigms.
Introduction On the last couple of months, I dove into the topic of State Machines and how we can design UIâ€™s with this concept in order to provide better semantic and predictability to our application.</description>
    </item>
    
  </channel>
</rss>
